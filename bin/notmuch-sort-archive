#!/usr/bin/env python3

import os
import os.path
import subprocess
from subprocess import PIPE
import sys

dry_run = False

prog_name = os.path.basename(sys.argv[0])
nm_top = os.path.expanduser('/home/chadv/mail')
maildir_top = os.path.expanduser('/home/chadv/mail/archive')

def print_error(*args, sep=' ', end='\n'):
    print('{0}: error:'.format(prog_name), *args,
          sep=sep, end=end, file=sys.stderr)

def print_info(*args, sep=' ', end='\n'):
    print('{0}: info:'.format(prog_name), *args,
          sep=sep, end=end, file=sys.stderr)

def foreach_date(callback):
    for year in range(2010, 2049):
        for month in range(1, 13):
            callback(year=year, month=month)

def maildir_name(year, month):
    return 'Archive.{0:04}.{1:02}'.format(year, month)

def maildir_get_path(year, month):
    return os.path.join(maildir_top, '.' + maildir_name(year, month))

def maildir_make(year, month):
    maildir_path = maildir_get_path(year, month)
    marker = os.path.join(maildir_get_path(year, month), 'maildirfolder')
    dirs = [
        os.path.join(maildir_path, 'new'),
        os.path.join(maildir_path, 'tmp'),
        os.path.join(maildir_path, 'cur'),
    ]

    for d in dirs:
        if not os.path.isdir(d):
            os.makedirs(d)

    if not os.path.exists(marker):
        open(marker, 'a').close()

def sort_messages(year, month):
    maildir_path = maildir_get_path(year, month)
    nm_path = maildir_path[len(nm_top):]
    search_args = [
        'notmuch', 'search', '--output=files',
        'not', 'folder:{0}'.format(maildir_path), 'and',
        'tag:archive', 'and',
        'date:{0:04}-{1:02}..{0:04}-{1:02}'.format(year, month),
    ]
    search_proc = subprocess.Popen(search_args, stdout=PIPE)
    for msg_src in search_proc.stdout:
        msg_src = msg_src.decode().rstrip()
        msg_basename = os.path.basename(msg_src)

        newtmpcur = os.path.basename(os.path.dirname(msg_src))
        if newtmpcur not in ['new', 'tmp', 'cur']:
            newtmpcur = 'new'

        msg_dest = os.path.join(maildir_path, newtmpcur, msg_basename)
        try:
            if os.path.samefile(msg_src, msg_dest):
                continue
        except FileNotFoundError:
            pass

        try:
            if not dry_run:
                os.rename(msg_src, msg_dest)
        except FileNotFoundError as e:
            print_error("failed to move file: {1}".format(msg_src, e))
        else:
            print_info("mv {0} {1}".format(msg_src, msg_dest))

print_info("WARNING: all paths hardcoded in script")
print_info("WARNING: known perf issues")

foreach_date(maildir_make)
foreach_date(sort_messages)
if not dry_run:
    subprocess.check_call(['notmuch', 'new', '--no-hooks'])
