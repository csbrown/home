" ----------------------------------------------------------------------------
" Preface
" ----------------------------------------------------------------------------

" Remove all autocommands for the current group.
autocmd!

let g:go_root = system("go env GOROOT")[:-2] " -2 strips the newline
if len(g:go_root) > 0
    let &runtimepath = g:go_root . "/misc/vim," . &runtimepath
endif

call pathogen#infect()

runtime ftplugin/man.vim

" ----------------------------------------------------------------------------
" Formatting
" ----------------------------------------------------------------------------

" To insert a real tab, use CTRL-V<Tab>

" In insert mode, use 'tabstop' spaces when inserting a <Tab>.
set expandtab

" Number of spaces displayed for <Tab>.
set tabstop=8

" Number of spaces to use for each step of (auto)indent.  Used for 'cindent',
" '>>', '<<', etc.
set shiftwidth=4

" With 'smarttab' on, <Tab> indents with 'shiftwidth'.  When off, a <Tab>
" indents with 'tabstop' or 'softabstop'.
set smarttab

" formatoptions
"
"   t  Auto-wrap text using textwidth
"
"   c  Auto-wrap comments using textwidth, inserting the current comment
"      leader automatically.
"
"   r  Automatically insert the current comment leader after hitting
"     <Enter> in Insert mode.
"
"   o  Automatically insert the current comment leader after hitting 'o' or
"     'O' in Normal mode.
"
"   n  When formatting text, recognize numbered lists.  This actually uses
"      the 'formatlistpat' option, thus any kind of list can be used. [...]
"      Note that 'autoindent' must be set too.  Doesn't work well well
"      together with "2".
"
"   1  Allow formatting of comments with "gq".
"
"   j  Where it makes sense, remove a comment leader when joining lines.
"
set formatoptions=tcroqn1j

set autoindent

" ----------------------------------------------------------------------------
" Appearance
" ----------------------------------------------------------------------------

colorscheme kiwi_dark

"
" Highlights
"
set cursorline
set hlsearch


"
" Status Line
"
set laststatus=2  " Always display status line.
set showcmd
set ruler


"
" Misc
"
syntax on
set nowrap
set listchars=tab:>-,extends:%,precedes:%


" ----------------------------------------------------------------------------
" Mapc
" ----------------------------------------------------------------------------

let mapleader = ","

nnoremap <leader>erc :tabedit $MYVIMRC<cr>
nnoremap <leader>src :source $MYVIMRC<cr>

" In command mode, <ENTER> behaves the same as in WYSIWYG editors.
noremap <CR> o<ESC>
noremap <S-CR> O<ESC>

" Convert word to lower and uppser case.
imap <leader>U <ESC>gUiw`]a
imap <leader>u <ESC>guiw`]a
noremap <leader>U m`gUiw``
noremap <leader>u m`guiw``

" Reload current buffer.
noremap <leader>e! :e!%<CR>
imap <leader>e! <ESC><leader>e!i

set pastetoggle=<F9>

" Walk quickly through the quicklist and bufferlist.
noremap <F2> :cc<cr>
noremap <F3> :cn<cr>
noremap <F4> :cp<cr>
noremap <F5> :bn<cr>
noremap <F6> :bp<cr>

nnoremap K :Man <cword><cr>

nnoremap <leader>tb :TagbarToggle<cr>

nnoremap <leader>cp :CtrlP<cr>
nnoremap <leader>cpf :CtrlP<cr>
nnoremap <leader>cpb :CtrlPBuffer<cr>
nnoremap <leader>cpr :CtrlPMRU<cr>
nnoremap <leader>cpt :CtrlPTag<cr>

" ----------------------------------------------------------------------------
" Filetypes
" ----------------------------------------------------------------------------

" Automatically detect filetype, and load its plugin and indent file.
filetype plugin indent on

" Go has a standard code style. Go uses tabs not spaces.
autocmd BufRead,BufNewFile *.go set noet ts=4 sw=4

autocmd BufRead,BufNewFile *.l,*.lpp set filetype=lex
autocmd BufRead,BufNewFile *.scala set filetype=scala
autocmd BufRead,BufNewFile *.y,*.ypp set filetype=yacc

" Use standard formatting for PKGBUILD.
autocmd BufNewFile,BufRead PKGBUILD* set et ts=2 sw=2

" Disable this option because it always annoyingly highlights the line
" currently being edited as having errors.
let go_highlight_trailing_whitespace_error = 0

" ----------------------------------------------------------------------------
" Git & Email
" ----------------------------------------------------------------------------

abbrev rb: Reviewed-by:
abbrev sob: Signed-off-by:
abbrev tb: Tested-by:

abbrev chadv-k@ Chad Versace <chad@kiwitree.net>
abbrev chadv-i@ Chad Versace <chad.versace@intel.com>
abbrev chadv-l@ Chad Versace <chad.versace@linux.intel.com>

" ----------------------------------------------------------------------------
" Misc
" ----------------------------------------------------------------------------

" Buffers remain open when hidden.
set hidden

" Don't leave litter lying around.
set nobackup
set nowritebackup
set noswapfile

set backspace=indent,eol,start
set matchpairs+=<:>
set modeline
set mouse=
set spelllang=en_us
set visualbell
set wildmenu

" Agressively reload the buffer on event FileChangedShell, which Vim emits the
" event when it notices the file has changed on disk.
function! KiwiFileChangedShell()
    if v:fcs_reason == 'changed' ||
     \ v:fcs_reason == 'conflict' ||
     \ v:fcs_reason == 'mode' ||
     \ v:fcs_reason == 'time'
        let v:fcs_choice = 'reload'
    else
        let v:fcs_choice = 'ask' 
    endif
endfunction 

autocmd FileChangedShell <buffer> call KiwiFileChangedShell() 

" vim: et sw=4:
